---
description: 성능 최적화 규칙
globs: ["**/*.ts", "**/*.tsx", "**/*.jsx"]
alwaysApply: false
---
아래의 조건 및 주의사항을 모두 적용하여 코드를 작성할 것.

==============================================

1. React 렌더링 최적화 조건
    - 불필요한 리렌더링을 방지하기 위해 React.memo를 적절히 활용할 것.
    - 복잡한 계산은 useMemo로 메모이제이션할 것.
    - 콜백 함수는 useCallback으로 메모이제이션할 것.
    - 무거운 초기화 작업은 useState의 lazy initialization을 활용할 것.

2. 이미지 최적화 조건
    - 이미지는 Next.js의 Image 컴포넌트를 사용할 것.
    - 이미지에 적절한 width, height 속성을 지정할 것.
    - 우선순위가 높은 이미지는 priority 속성을 추가할 것.
    - 가능한 경우 WebP 포맷을 사용할 것.

3. 코드 스플리팅 조건
    - 페이지 단위로 코드 스플리팅이 자동 적용되도록 Next.js 라우팅을 활용할 것.
    - 무거운 컴포넌트는 dynamic import를 고려할 것.
    - 초기 로딩에 필요하지 않은 라이브러리는 지연 로딩할 것.

4. 번들 사이즈 최적화 조건
    - 사용하지 않는 코드를 제거하고 tree shaking을 활용할 것.
    - lodash 등의 라이브러리는 필요한 함수만 import할 것.
    - 무거운 라이브러리는 가벼운 대안을 검토할 것.

5. 상태 관리 최적화 조건
    - 전역 상태는 최소화하고, 필요한 경우에만 사용할 것.
    - 상태는 가능한 한 사용하는 컴포넌트 가까이에 위치시킬 것.
    - 리스트 렌더링 시 적절한 key를 사용할 것.

6. 네트워크 최적화 조건
    - API 호출은 React Query를 활용하여 캐싱할 것.
    - prefetching을 활용하여 사용자 경험을 개선할 것.
    - 중복 요청을 방지할 것.
