---
description: "TDD 기반 회원가입 기능 구현 (Zod + Apollo Client + Playwright)"
globs: [
  "src/components/login/auth-signup/hooks/index.form.hook.tsx",
  "src/components/login/auth-signup/tests/index.form.hook.spec.ts",
  "src/components/login/auth-signup/index.tsx",
  "src/components/login/auth-signup/styles.module.css"
]
alwaysApply: false
---
아래의 조건 및 주의사항을 모두 적용하여 코드를 작성할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
        - @01-common.mdc
        - @04-func.mdc (TDD 규칙이 있다면)

==============================================

조건-파일경로) 참고할 API 문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) [경로 수정됨] 구현될 TSX 파일경로: src/components/login/auth-signup/index.tsx
조건-파일경로) [경로 수정됨] 구현될 CSS 파일경로: src/components/login/auth-signup/styles.module.css
조건-파일경로) [경로 수정됨] 구현될 HOOK 파일경로: src/components/login/auth-signup/hooks/index.form.hook.tsx
조건-파일경로) [경로 수정됨] 구현될 TEST 파일경로: src/components/login/auth-signup/tests/index.form.hook.spec.ts
조건-파일경로) [경로 수정됨] GraphQL API 정의: src/commons/graphql/gql.ts (필요시 여기에 Mutation 추가)

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

        1) 테스트 제외 라이브러리
            - jest
            - @testing-library/react

        2) 테스트 조건
            - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
            - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
            - [경로 수정됨] /login/signup 페이지가 완전히 로드된 후 테스트할 것.
                - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                - 페이지 로드 식별 금지사항: networkidle 대기 방법

        3) 테스트 API 조건
            3-1) 데이터
                - 실제데이터를 사용할 것.
                - Mock데이터 사용하지 말 것.

            3-2) 성공시나리오
                - API 모킹하지 말 것.
                - 이메일 중복을 피하기 위해 이메일은 timestamp를 포함하여 항상 등록할 것.
                - _id가 정상적으로 반환되는지 확인할 것.

            3-3) 실패시나리오
                - API 모킹할 것. (Playwright의 page.route() 사용)

==============================================

핵심요구사항) 다음의 조건에 맞게 회원가입 폼 등록 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.

        1) 라이브러리조건
            - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
            - 검증: 이미 설치되어있는 zod를 사용할 것.
            - [핵심 수정] API: 이미 설치되어있는 @apollo/client의 useMutation 훅을 사용할 것.

        2) 유저시나리오(회원가입)
            1. 모든 인풋(이메일, 비밀번호, 비밀번호 확인, 이름)이 입력되면 회원가입버튼을 활성화 할 것.

            2. 회원가입버튼을 누르면 회원가입 API (GraphQL Mutation)를 요청할 것.
                2-1) [GraphQL] Mutation 이름: createUser
                2-2) [GraphQL] Mutation 변수: createUserInput (email, password, name)
                2-3) [GraphQL] 응답데이터: { data: { createUser: { _id } } }
                2-4) zod 검증 조건
                    - email: '@' 포함 및 이메일 형식
                    - password: 영문 + 숫자 포함 8자리 이상
                    - passwordConfirm: password와 동일 (refine 사용)
                    - name: 최소 1글자 이상

            [모달 -> alert로 수정됨]
            3. 회원가입에 성공하면, alert("회원가입이 완료되었습니다.")를 노출하고, 아래의 상황별 지시를 따를 것.

            4. 회원가입에 실패하면(GraphQL Error 발생 시), alert(error.message) 를 노출하고, 아래의 상황별 지시를 따를 것.
            
            [모달 -> alert로 수정됨]
            5. 각 상황별 alert 확인 후, 아래의 지시에 따를 것.
                5-1) 페이지이동조건
                    - 가입완료 alert 확인 후:
                        1. 로그인페이지로 이동 => /login
                    - 가입실패 alert 확인 후:
                        1. (페이지 이동 없음)