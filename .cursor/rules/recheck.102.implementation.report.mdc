---
description: 스타일 일관성 개선 작업 완료 보고서
globs: ["**/*"]
alwaysApply: false
---

# 스타일 일관성 개선 작업 완료 보고서

작성일: 2025-10-20
상태: 완료

## 1. 완료된 작업

### 1.1 ✅ 빈 테스트 파일 정리
**문제**: 내용이 없는 테스트 파일 존재
- `src/commons/components/diaries/test/index.binding.hook.spec.ts`
- `src/commons/components/diaries/test/index.link.routing.hook.spec.ts`

**해결**: 불필요한 파일 삭제
- 해당 기능에 대한 테스트는 이미 `tests/` 폴더에 Playwright E2E 테스트로 구현됨
- 중복/불필요한 파일을 삭제하여 프로젝트 구조 정리

### 1.2 ✅ Prettier 설정 추가
**생성 파일**: `.prettierrc`

**주요 설정**:
```json
{
  "semi": true,                    // 세미콜론 사용
  "trailingComma": "es5",          // ES5 호환 trailing comma
  "singleQuote": true,             // 작은따옴표 사용
  "printWidth": 100,               // 한 줄 최대 100자
  "tabWidth": 2,                   // 탭 너비 2칸
  "useTabs": false,                // 스페이스 사용
  "endOfLine": "lf",               // LF 줄바꿈 (Unix 스타일)
  "arrowParens": "always",         // 화살표 함수 매개변수 괄호 항상 사용
  "bracketSpacing": true,          // 객체 리터럴 브래킷 공백
  "jsxSingleQuote": false,         // JSX에서는 큰따옴표
  "jsxBracketSameLine": false      // JSX 닫는 브래킷 다음 줄
}
```

**효과**: 
- 파일 끝 빈 줄 자동 통일
- 코드 포맷팅 일관성 자동 유지

### 1.3 ✅ EditorConfig 설정 추가
**생성 파일**: `.editorconfig`

**주요 설정**:
```ini
[*]
charset = utf-8
end_of_line = lf              # Unix 스타일 줄바꿈
insert_final_newline = true   # 파일 끝 빈 줄 자동 삽입
trim_trailing_whitespace = true
indent_style = space
indent_size = 2
```

**효과**: 
- IDE/에디터 레벨에서 일관된 포맷 보장
- 팀원들의 다양한 에디터 환경에서도 동일한 스타일 유지

### 1.4 ✅ ESLint 규칙 강화
**수정 파일**: `.eslintrc.json`

**추가된 규칙**:
```json
{
  "rules": {
    "@typescript-eslint/no-explicit-any": "error",        // any 타입 금지
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "react/display-name": "error",                        // displayName 필수
    "react/jsx-key": "error",                             // key prop 필수
    "no-console": ["warn", { "allow": ["warn", "error"] }] // console.log 경고
  }
}
```

**효과**: 
- TypeScript 타입 안정성 강화
- React 모범 사례 강제
- 디버깅 코드(console.log) 사전 감지

### 1.5 ✅ NPM 스크립트 추가
**수정 파일**: `package.json`

**추가된 스크립트**:
```json
{
  "scripts": {
    "lint:fix": "next lint --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,css}\" \"tests/**/*.{ts,tsx}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,css}\" \"tests/**/*.{ts,tsx}\""
  }
}
```

**사용법**:
```bash
# 린트 검사 및 자동 수정
npm run lint:fix

# 코드 포맷팅 (자동 수정)
npm run format

# 포맷 검사만 (수정 없이)
npm run format:check
```

## 2. 설치 필요 패키지

Prettier를 사용하려면 다음 패키지 설치가 필요합니다:

```bash
cd my-app
npm install --save-dev prettier
```

또는 추가 플러그인과 함께:

```bash
npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier
```

설치 후 `.eslintrc.json` 업데이트 (선택사항):
```json
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "plugin:storybook/recommended",
    "prettier"  // 추가: ESLint와 Prettier 충돌 방지
  ]
}
```

## 3. 사용 가이드

### 3.1 개발 시작 전
```bash
# 의존성 설치
npm install

# Prettier 설치 (아직 안 했다면)
npm install --save-dev prettier
```

### 3.2 코드 작성 후
```bash
# 1. 린트 검사 및 수정
npm run lint:fix

# 2. 포맷팅 적용
npm run format

# 3. 빌드 테스트
npm run build

# 4. E2E 테스트
npm run test:e2e
```

### 3.3 IDE/에디터 설정 권장

#### VS Code
1. 확장 프로그램 설치:
   - ESLint
   - Prettier - Code formatter
   - EditorConfig for VS Code

2. `settings.json` 설정:
```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}
```

#### Cursor
- VS Code 호환 설정 자동 적용
- 동일한 확장 프로그램 설치 권장

## 4. 일관성 체크리스트 (재작성)

### 새 컴포넌트 작성 시
- [ ] variant/size/theme Props 패턴
- [ ] React.forwardRef 사용
- [ ] displayName 설정
- [ ] Props 타입 export
- [ ] CSS Module 사용 (`styles.module.css`)
- [ ] data-testid 속성 추가
- [ ] Import 순서 (React → 외부 → 내부 → 스타일)
- [ ] JSDoc 주석 (공개 API)
- [ ] 파일 저장 시 자동 포맷팅 확인

### 새 훅 작성 시
- [ ] `use` 접두사
- [ ] JSDoc 문서화 (@param, @returns, @example)
- [ ] 타입 명시
- [ ] 에러 처리
- [ ] 파일명: `*.hook.ts` 또는 `*.hook.tsx`

### 새 테스트 작성 시
- [ ] E2E: `tests/` 폴더 (Playwright)
- [ ] describe/test 구조
- [ ] data-testid 선택자 사용
- [ ] 의미 있는 테스트 설명 (한글)
- [ ] beforeEach로 공통 설정

### 커밋 전
- [ ] `npm run lint:fix` 실행
- [ ] `npm run format` 실행
- [ ] `npm run build` 성공
- [ ] `npm run test:e2e` 통과 (선택)
- [ ] Conventional Commits 형식 (한글)

## 5. 파일 구조 규칙

### 컴포넌트 폴더 구조
```
component-name/
├── index.tsx                  # 컴포넌트 구현
├── index.stories.tsx          # Storybook 스토리
├── styles.module.css          # CSS Module
└── prompts/                   # AI 프롬프트 (선택)
    ├── prompt.101.wireframe.txt
    └── prompt.201.ui.txt
```

### 테스트 위치
```
my-app/
├── src/
│   └── commons/
│       └── components/
│           └── button/
│               └── index.tsx
└── tests/                     # E2E 테스트 (Playwright)
    └── button.spec.ts
```

## 6. Import 순서 가이드

```typescript
// 1. React/Next.js 코어
import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';

// 2. 외부 라이브러리
import { useQuery } from '@tanstack/react-query';
import { z } from 'zod';

// 3. 내부 컴포넌트
import Button from '@/commons/components/button';
import Modal from '@/commons/components/modal';

// 4. 내부 유틸리티/상수/타입
import { EMOTION_META } from '@/commons/constants/enum';
import { useBindingHook } from './hooks/index.binding.hook';
import type { DiaryType } from './types';

// 5. 스타일 (항상 마지막)
import styles from './styles.module.css';
```

## 7. 주석 스타일 가이드

### 공개 API (export된 함수/컴포넌트/훅)
```typescript
/**
 * 일기 데이터를 로컬스토리지에서 불러오는 Hook
 * 
 * @returns {Object} 일기 데이터와 로딩 상태
 * @returns {Diary[]} diaries - 일기 데이터 배열
 * @returns {boolean} isLoading - 로딩 상태
 * 
 * @example
 * const { diaries, isLoading } = useBindingHook();
 * 
 * if (isLoading) return <div>로딩중...</div>;
 * return <DiaryList diaries={diaries} />;
 */
export function useBindingHook() { ... }
```

### 내부 구현
```typescript
// 로컬스토리지에서 데이터 불러오기
const storedData = localStorage.getItem('diaries');

// 데이터 파싱 및 기본값 처리
const parsedData = storedData ? JSON.parse(storedData) : [];
```

### CSS
```css
/* Base Styles */
.button { ... }

/* Size Variants */
.size-small { ... }
.size-medium { ... }

/* Theme Variants - Light */
.variant-primary.theme-light { ... }
```

## 8. 개선 효과 요약

| 항목 | 개선 전 | 개선 후 |
|------|---------|---------|
| 파일 끝 빈 줄 | 불일치 | 통일 (자동) |
| 코드 포맷팅 | 수동 | 자동 |
| Import 순서 | 불규칙 | 가이드 제공 |
| 린팅 규칙 | 기본만 | 강화 (any 금지 등) |
| 빈 파일 | 2개 | 0개 |
| 문서화 | 일부 | 체계화 |

**정량적 개선**:
- 삭제된 불필요 파일: 2개
- 추가된 설정 파일: 3개 (.prettierrc, .editorconfig, .eslintrc.json 업데이트)
- 추가된 NPM 스크립트: 3개 (lint:fix, format, format:check)

**정성적 개선**:
- ⭐ 코드 일관성 자동화
- ⭐ 타입 안정성 강화
- ⭐ 협업 효율성 향상
- ⭐ 유지보수성 향상

## 9. 다음 단계 (선택사항)

### 우선순위 중간
1. **Git Hooks 설정** (Husky + lint-staged)
   ```bash
   npm install --save-dev husky lint-staged
   npx husky install
   ```

2. **주석 스타일 가이드 적용**
   - 기존 주요 컴포넌트에 JSDoc 추가
   - 시작: Button, Input, Modal 등 공통 컴포넌트

3. **테스트 상수 분리**
   ```typescript
   // tests/constants.ts
   export const TEST_TIMEOUTS = {
     SHORT: 500,
     MEDIUM: 2000,
     LONG: 5000,
   } as const;
   ```

### 우선순위 낮음
4. **통합 에러 로깅 유틸리티**
   ```typescript
   // src/commons/utils/logger.ts
   export const logger = {
     error: (message: string, error?: unknown) => { ... },
     warn: (message: string) => { ... },
   };
   ```

5. **CSS 변수 명명 재정비**
   - 현재: `--neutral-950`, `--typo-bodyMd-size`
   - 목표: `--color-neutral-950`, `--typo-body-md-size`

## 10. 문제 해결

### Prettier 실행 오류
```bash
# Prettier 미설치 시
npm install --save-dev prettier

# 설정 파일 확인
cat .prettierrc
```

### ESLint 충돌
```bash
# Prettier와 ESLint 충돌 해결
npm install --save-dev eslint-config-prettier

# .eslintrc.json에 "prettier" 추가
```

### 파일 포맷이 안 맞는 경우
```bash
# 전체 파일 강제 포맷팅
npm run format

# 특정 파일만
npx prettier --write src/path/to/file.tsx
```

## 11. 참고 자료

- [Prettier 공식 문서](https://prettier.io/)
- [EditorConfig 공식 사이트](https://editorconfig.org/)
- [ESLint 규칙](https://eslint.org/docs/rules/)
- [Conventional Commits](https://www.conventionalcommits.org/)

---

**작업 완료**: 2025-10-20
**다음 검토 예정**: 필요 시
**담당**: AI Assistant
