---
description: 스타일 일관성 재검토 요청 및 분석 결과
globs: ["**/*.ts", "**/*.tsx", "**/*.css"]
alwaysApply: false
---

# 스타일 일관성 재검토 보고서

작성일: 2025-10-20
상태: 분석 완료

## 1. 검토 범위

프로젝트 전반의 코드 스타일 일관성을 다음 영역에서 검토:
- TypeScript/TSX 파일 구조
- CSS Module 패턴
- 컴포넌트 아키텍처
- 테스트 코드 구조
- 명명 규칙
- 포맷팅 및 컨벤션

## 2. 일관성 분석 결과

### 2.1 ✅ 우수한 일관성 (유지 필요)

#### 컴포넌트 구조
```typescript
// 모든 공통 컴포넌트가 동일한 패턴을 따름
export type ComponentVariant = 'primary' | 'secondary' | 'tertiary';
export type ComponentSize = 'small' | 'medium' | 'large';
export type ComponentTheme = 'light' | 'dark';

export interface ComponentProps extends BaseProps {
  variant?: ComponentVariant;
  size?: ComponentSize;
  theme?: ComponentTheme;
}

export const Component = React.forwardRef<HTMLElement, ComponentProps>(...);
Component.displayName = 'Component';
```
**평가**: Button, Input, Modal 등 모든 공통 컴포넌트가 동일한 패턴을 따르고 있어 매우 일관적임.

#### CSS Module 사용
- 모든 컴포넌트가 `styles.module.css` 파일명 사용
- className 조합 패턴 일관성:
  ```typescript
  const classes = [
    styles.base,
    styles[`variant-${variant}`],
    styles[`size-${size}`],
    styles[`theme-${theme}`],
    className,
  ].filter(Boolean).join(' ');
  ```

#### 테스트 속성
- 모든 테스트 가능한 요소에 `data-testid` 속성 일관되게 사용
- 명명 규칙: `{component}-{element}` 또는 `{component}-{element}-{id}`
  - 예: `diary-card-1`, `diaries-write-button`

#### TypeScript 타입 정의
- Props 타입이 컴포넌트와 동일 파일에 위치
- 타입 vs interface 사용이 일관적 (type은 유니온, interface는 Props)
- 명시적 타입 export

### 2.2 ⚠️ 개선 필요한 영역

#### 1. 파일 끝 빈 줄 처리 불일치
**문제**:
```typescript
// 어떤 파일: 빈 줄 1개
export default Component;
↵
// 어떤 파일: 빈 줄 2개  
export default Component;
↵
↵
// 어떤 파일: 빈 줄 없음
export default Component;
```

**권장사항**: 
- 모든 파일 끝에 정확히 1개의 빈 줄 유지
- `.editorconfig` 또는 Prettier 설정으로 자동화

#### 2. Import 순서 규칙 미정립
**현재 상태**:
```typescript
// 파일 A
import React from 'react';
import styles from './styles.module.css';
import Component from '@/commons/components/component';

// 파일 B
import { useState } from 'react';
import Image from 'next/image';
import styles from './styles.module.css';
```

**권장사항**:
```typescript
// 1. React/Next.js 코어
import React, { useState } from 'react';
import Image from 'next/image';

// 2. 외부 라이브러리
// (현재 없음)

// 3. 내부 컴포넌트/유틸리티
import Component from '@/commons/components/component';
import { CONSTANT } from '@/commons/constants/enum';

// 4. 스타일 (항상 마지막)
import styles from './styles.module.css';
```

#### 3. 주석 스타일 불일치
**문제**:
```typescript
// 파일 A: JSDoc 스타일 (훅 파일)
/**
 * 일기 데이터를 불러오는 Hook
 * 
 * @returns {Object} 일기 데이터와 로딩 상태
 * @example
 * const { diaries } = useBindingHook();
 */

// 파일 B: 일반 주석 (컴포넌트 파일)
// Base Button Styles

// 파일 C: 주석 없음
```

**권장사항**:
- **공개 API (export)**: JSDoc 스타일 필수
  - 함수, 훅, 컴포넌트의 매개변수와 반환값 문서화
- **내부 구현**: 간단한 `//` 주석
- **CSS**: `/* 섹션 구분 */` 주석 사용

#### 4. 테스트 파일 timeout 하드코딩
**문제**:
```typescript
await page.waitForSelector('[data-testid="diary-detail-container"]', { timeout: 500 });
```

**권장사항**:
```typescript
// playwright.config.ts 또는 별도 상수 파일
export const TEST_TIMEOUTS = {
  SHORT: 500,
  MEDIUM: 2000,
  LONG: 5000,
} as const;

// 테스트 파일
await page.waitForSelector('[data-testid="diary-detail-container"]', { 
  timeout: TEST_TIMEOUTS.SHORT 
});
```

#### 5. 빈 테스트 파일 존재
**문제**:
- `src/commons/components/diaries/test/index.binding.hook.spec.ts`: 내용 없음 (1줄만 존재)
- `src/commons/components/diaries/test/index.link.routing.hook.spec.ts`: 내용 없음 (1줄만 존재)

**권장사항**:
- 구현이 완료되지 않은 테스트 파일은 `.skip` 접미사 추가
- 또는 최소한의 placeholder 테스트 작성
- 또는 파일 삭제

#### 6. CSS 변수 명명 일관성
**현재 상태**:
```css
/* globals.css: 케밥 케이스 */
--neutral-950
--typo-bodyMd-size

/* 일부 컴포넌트: 다양한 형태 */
```

**권장사항**:
- 모든 CSS 변수는 케밥 케이스 사용 (현재 규칙 유지)
- 네이밍 패턴: `--{category}-{subcategory}-{property}`
  - 예: `--color-neutral-950`, `--typo-body-md-size`

### 2.3 📋 추가 권장사항

#### 1. ESLint/Prettier 설정 강화
현재 프로젝트에 필요한 린팅 규칙:

```json
// .eslintrc.json 추가 권장
{
  "rules": {
    "import/order": ["error", {
      "groups": [
        "builtin",
        "external",
        "internal",
        "parent",
        "sibling",
        "index",
        "object",
        "type"
      ],
      "pathGroups": [
        {
          "pattern": "react",
          "group": "external",
          "position": "before"
        },
        {
          "pattern": "@/commons/**",
          "group": "internal",
          "position": "after"
        }
      ],
      "alphabetize": {
        "order": "asc",
        "caseInsensitive": true
      }
    }],
    "react/jsx-key": "error",
    "react/display-name": "error",
    "@typescript-eslint/explicit-module-boundary-types": "warn"
  }
}
```

#### 2. 파일/폴더 명명 규칙 문서화
**현재 암묵적 규칙** (명시 필요):
- 컴포넌트: `PascalCase` (Button, Modal)
- 훅: `camelCase` with `.hook` suffix (index.binding.hook.ts)
- 테스트: `.spec.ts` suffix
- 스타일: `styles.module.css`
- 상수: `SCREAMING_SNAKE_CASE` (EMOTION_META)

#### 3. 컴포넌트 Props 기본값 처리
**현재**: 대부분 구조 분해 시 기본값 설정
```typescript
const Component = ({ variant = 'primary', size = 'medium' }) => { ... }
```

**일관성 체크**:
- 모든 옵셔널 Props는 기본값 명시
- 기본값은 가장 일반적인 사용 케이스 기준

#### 4. 에러 처리 일관성
**현재**: console.error 사용
```typescript
catch (error) {
  console.error('Failed to load diaries:', error);
}
```

**권장**: 통합 에러 로깅 유틸리티 고려
```typescript
// commons/utils/logger.ts
export const logger = {
  error: (message: string, error?: unknown) => {
    console.error(`[Error] ${message}`, error);
    // 추후 Sentry 등 모니터링 도구 연동 가능
  },
};
```

## 3. 우선순위별 개선 계획

### 🔴 우선순위 높음 (즉시 처리)
1. ✅ 빈 테스트 파일 처리
   - `index.binding.hook.spec.ts` 구현 또는 제거
   - `index.link.routing.hook.spec.ts` 구현 또는 제거

2. ✅ Import 순서 규칙 정립 및 적용
   - `.eslintrc.json`에 규칙 추가
   - 기존 파일 일괄 정리 (ESLint auto-fix)

3. ✅ 파일 끝 빈 줄 통일
   - Prettier 설정: `"endOfLine": "lf"`, `"insertFinalNewline": true`

### 🟡 우선순위 중간 (단계적 처리)
4. 주석 스타일 가이드 작성 및 적용
   - 공개 API JSDoc 필수화
   - 기존 주요 컴포넌트부터 순차 적용

5. 테스트 상수 분리
   - `TEST_TIMEOUTS` 상수 생성
   - 기존 테스트 파일 리팩토링

### 🟢 우선순위 낮음 (점진적 개선)
6. 통합 에러 로깅 유틸리티 도입
7. CSS 변수 명명 규칙 재정비 (호환성 고려)

## 4. 일관성 체크리스트

### 새 컴포넌트 작성 시
- [ ] variant/size/theme Props 패턴 따름
- [ ] React.forwardRef 사용
- [ ] displayName 설정
- [ ] Props 타입 export
- [ ] CSS Module 사용
- [ ] data-testid 속성 추가
- [ ] Import 순서 준수
- [ ] 파일 끝 빈 줄 1개
- [ ] JSDoc 주석 작성

### 새 훅 작성 시
- [ ] `use` 접두사 사용
- [ ] JSDoc으로 매개변수/반환값 문서화
- [ ] @example 섹션 포함
- [ ] 타입 명시적 선언
- [ ] 에러 처리 포함

### 새 테스트 작성 시
- [ ] describe/test 구조 사용
- [ ] data-testid로 요소 선택
- [ ] 상수화된 timeout 사용
- [ ] 의미 있는 테스트 설명
- [ ] beforeEach로 공통 설정

## 5. 자동화 도구 권장

### 현재 설정 확인 필요
```bash
# 1. Prettier 설정 확인
cat .prettierrc

# 2. ESLint 설정 확인  
cat .eslintrc.json

# 3. 자동 포맷 실행
npm run lint
npm run format
```

### Git Hooks (Husky + lint-staged)
```json
// package.json
{
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.css": [
      "prettier --write"
    ]
  }
}
```

## 6. 결론

### 현재 상태 평가: ⭐⭐⭐⭐☆ (4/5)

**강점**:
- 컴포넌트 아키텍처 일관성 우수
- TypeScript 타입 사용 체계적
- 테스트 가능성 (data-testid) 우수
- CSS Module 패턴 일관적

**개선 영역**:
- 코드 포맷팅 자동화 필요
- 주석/문서화 표준화 필요
- 린팅 규칙 강화 필요
- 빈 파일 정리 필요

### 예상 효과
개선 사항 적용 시:
1. **가독성 향상**: 일관된 포맷과 구조로 코드 이해 용이
2. **유지보수성 향상**: 명확한 패턴으로 수정/확장 용이
3. **협업 효율성 향상**: 명확한 규칙으로 리뷰/토론 감소
4. **버그 감소**: 린팅 규칙으로 잠재적 오류 사전 방지

---

**다음 단계**: 우선순위 높음 항목부터 순차적으로 개선 진행
